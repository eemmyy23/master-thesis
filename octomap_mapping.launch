<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>


	<group if="0">
		<param name="use_sim_time" value="true"/>
		<node pkg="rosbag" type="play" name="rosbag" args="--clock -r 1 -d 5 -k '/home/robot2/.ros/2013-05-12-14-45-19.bag'"> 
			<remap from="/tf" to="/tf_old" />
		</node>
		<node pkg="tf" type="tf_remap" name="tf_remap" />

		<node pkg="rviz" type="rviz" name="rviz" /> 
	</group>
	
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.1" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="/hect_map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="100.0" />
		<param name="sensor_model/min_range" value="5.0" />
		<param name="pointcloud_min_z" value="1" />
		<param name="pointcloud_max_z" value="50" />
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/velodyne_points" />
	
	</node>
</launch>




